#!/usr/bin/env python
# coding: utf-8

# In[2]:


from dialog_bot_sdk.bot import DialogBot
from dialog_api import messaging_pb2
from dialog_bot_sdk import interactive_media
from datetime import datetime
import random
import pandas as pd
import grpc


# In[3]:


#–º–∞—Å—Å–∏–≤ –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Ö–æ–¥—è—â–∏–µ users
users = []
#–º–∞—Å—Å–∏–≤ –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ Push_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
last_time = []
#—Å–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–∏–¥–µ–ª user
#–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ user –∑–∞–ø–∏—Å—ã–≤–∞–µ–º,—á—Ç–æ –æ–Ω –Ω–µ –≤–∏–¥–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
user_not_seen_notification = {}
#–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤ excel csv, –≥–¥–µ –±—É–¥–µ—Ç –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ —Å–∞–º–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
data = pd.read_csv("Notifications.csv",encoding='cp1251')
#–í—Å–µ Id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ids = list(data["Id"].unique())
#–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –º—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 - id, 2 - —Å –∫–∞–∫–æ–≥–æ, 3 - –ø–æ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è
datas = []
#–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0 - –≤—ã–∫–ª—é—á–µ–Ω—ã, 1 - –≤–∫–ª—é—á–µ–Ω—ã
notif = [] 


# In[4]:


#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–µ–¥—ã–¥—â—É–µ–≥–æ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def pass_time(last_time):
    date = datetime.now()
    #–ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã –∏ —É–∑–Ω–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ
    pass_time = date.hour*60*60 + date.minute*60 + date.second - last_time
    return pass_time


# In[5]:


def RepresentInt(s):
    try: 
        number = int(s)
        if number < 0:
            return False
        else:
            return True
    except ValueError:
        return False


# In[6]:


def adding_person(id, message):
    global datas, notif
    for i in range(len(datas)):
        if id == datas[i][0]:
            if len(datas[i]) == 1:
                msg =  "–ü—Ä–∏–≤–µ—Çüëã\n–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –¥—Ä—É–∂–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ."
                msg += "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–¥–µ—Å—å –æ—Å–≤–æ–∏—Ç—Å—è.\n "
                msg += "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –≤–∞—Å –Ω–µ –±—É–¥–µ–º –±–µ—Å–ø–æ–∫–æ–∏—Ç—å, –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 18 –¥–æ 23"
                peer = bot.users.get_user_peer_by_id(id)
                bot.messaging.send_message(peer, msg)
                datas[i] += ['']
                print(len(datas[i]))
            elif len(datas[i]) == 2:
                if RepresentInt(message):
                    time = int(message)
                    if time >= 18 and time <= 23:
                        datas[i][1] = message
                        datas[i] += ['']
                        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å, —Ä–∞–Ω—å—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –≤–∞—Å –Ω–µ –ø–æ–±–µ—Å–ø–æ–∫–æ–∏–º, –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 6 –¥–æ 12"
                        peer = bot.users.get_user_peer_by_id(id)
                        bot.messaging.send_message(peer, msg)
                    else:
                        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 18 –¥–æ 23"
                        peer = bot.users.get_user_peer_by_id(id)
                        bot.messaging.send_message(peer, msg)
                else:
                    msg = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 18 –¥–æ 23"
                    peer = bot.users.get_user_peer_by_id(id)
                    bot.messaging.send_message(peer, msg)
            elif len(datas[i]) == 3:
                if datas[i][2] == '':
                    if RepresentInt(message):
                        time = int(message)
                        if time >= 6 and time <= 12:
                            datas[i][2] = message
                            msg = "–° —ç—Ç–æ–π –º–∏–Ω—É—Ç—ã —è –±—É–¥—É –ø–æ—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ."
                            msg += "–ó–∞–º–∞–Ω—á–∏–≤–æ –Ω–µ —Ç–∞–∫ –ª–∏?\n–¢–∞–∫ –∫–∞–∫ —è –Ω–∞ —Ä–∞–±–æ—Ç–µ —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç, —Ç–æ –∑–Ω–∞—é —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å."
                            msg +=  "–°–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–ª—å–∑—è –æ–±–æ–π—Ç–∏—Å—å."
                            peer = bot.users.get_user_peer_by_id(id)
                            bot.messaging.send_message(peer, msg)
                            if notif[i][1] == 1:
                                but = "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            else:
                                but = "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            button_enterence = interactive_media.InteractiveMediaButton(
                                "Enterence", "–ü—Ä–æ–ø—É—Å–∫")
                            button_time = interactive_media.InteractiveMediaButton(
                                "Time", "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è")
                            button_food = interactive_media.InteractiveMediaButton(
                                "Food", "–°—Ç–æ–ª–æ–≤–∞—è")
                            button_cansel = interactive_media.InteractiveMediaButton(
                                "Cansel", but)
                            bot.messaging.send_message(
                                peer, " ", [
                                    interactive_media.InteractiveMediaGroup([
                                        interactive_media.InteractiveMedia(
                                            1, button_enterence, style='primary'),
                                        interactive_media.InteractiveMedia(
                                            2, button_time, style='primary'),
                                        interactive_media.InteractiveMedia(
                                            3, button_food, style='primary'),
                                        interactive_media.InteractiveMedia(
                                            4, button_cansel, style='primary')])
                                ])
                        else:
                            msg = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 6 –¥–æ 12"
                            peer = bot.users.get_user_peer_by_id(id)
                            bot.messaging.send_message(peer, msg)
                    else:
                        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 6 –¥–æ 12"
                        peer = bot.users.get_user_peer_by_id(id)
                        bot.messaging.send_message(peer, msg)
                else:
                    msg =  "–°–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–ª—å–∑—è –æ–±–æ–π—Ç–∏—Å—å."
                    peer = bot.users.get_user_peer_by_id(id)
                    bot.messaging.send_message(peer, msg)
                    if notif[i][1] == 1:
                        but = "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                    else:
                        but = "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                    button_enterence = interactive_media.InteractiveMediaButton(
                        "Enterence", "–ü—Ä–æ–ø—É—Å–∫")
                    button_time = interactive_media.InteractiveMediaButton(
                        "Time", "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è")
                    button_food = interactive_media.InteractiveMediaButton(
                        "Food", "–°—Ç–æ–ª–æ–≤–∞—è")
                    button_cansel = interactive_media.InteractiveMediaButton(
                        "Cansel", but)
                    bot.messaging.send_message(
                        peer, " ", [
                            interactive_media.InteractiveMediaGroup([
                                interactive_media.InteractiveMedia(
                                    1, button_enterence, style='primary'),
                                interactive_media.InteractiveMedia(
                                    2, button_time, style='primary'),
                                interactive_media.InteractiveMedia(
                                    3, button_food, style='primary'),
                                interactive_media.InteractiveMedia(
                                    4, button_cansel, style='primary')])
                        ])
                


# In[7]:


def send_notification(bot, uid):
    global data
    global user_not_seen_notification
    
    
    peer = bot.users.get_user_peer_by_id(uid)
    #–ï—Å–ª–∏ –≤—Å–µ —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —Å–Ω–æ–≤–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –Ω–æ–≤–æ–π
    if (user_not_seen_notification[uid] == []):
        user_not_seen_notification[uid] = list(data["Id"].unique())
        notific_id = random.choice(user_not_seen_notification[uid])
        bot.messaging.send_message(
        peer,
        str(data[data["Id"] == notific_id]["Notification"].values[0])
        )
    else:
        #–∏–Ω–∞—á–µ –æ—Ç—Ä–∞–≤–ª—è–µ–º —Ç–æ —á—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
        notific_id = random.choice(user_not_seen_notification[uid])
        bot.messaging.send_message(
        peer,
        str(data[data["Id"] == notific_id]["Notification"].values[0])
        )
    
    user_not_seen_notification[uid].remove(notific_id)
    


# In[8]:


def on_click(*params):
    global notif
    uid = params[0].uid
    which_button = params[0].value
    peer = bot.users.get_user_peer_by_id(uid)

    if (which_button == 'Enterence'):
        flag_reply = 1
        bot.messaging.send_message(
            peer, "–¢–µ–∫—Å—Ç –æ –ø—Ä–æ–ø—É—Å–∫–µ")
    if (which_button == 'Time'):
        flag_reply = 1
        bot.messaging.send_message(
            peer, "–¢–µ–∫—Å—Ç –æ –≤—Ä–µ–º–µ–Ω–∏")
    if (which_button == 'Food'):
        flag_reply = 1
        bot.messaging.send_message(
            peer, "–¢–µ–∫—Å—Ç –æ –µ–¥–µ")
    if (which_button == 'Cansel'):
        flag_reply = 1
        for i in range(len(notif)):
            if uid == notif[i][0]:
                if notif[i][1] == 0:
                    msg = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
                    notif[i][1] = 1
                else:
                    msg = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
                    notif[i][1] = 0
                bot.messaging.send_message(
                    peer, msg)
                break




# In[9]:


def on_msg(*params):
    global users
    global last_time
    global user_not_seen_notification
    global datas
    global notif
    
    
    if params[0].peer.id not in users:
        datas += [[params[0].peer.id]]
        notif += [[params[0].peer.id, 1]]
        users.append(params[0].peer.id)
        date = datetime.now()
        last_time.append(date.hour*60*60 + date.minute*60 + date.second)
        user_not_seen_notification[params[0].peer.id] = list(data["Id"].unique()) 

    adding_person(params[0].peer.id, params[0].message.textMessage.text)
    


# In[10]:


if __name__ == '__main__':
    
    bot = DialogBot.get_secure_bot(
        "hackathon-mob.transmit.im",  # bot endpoint from environment
        grpc.ssl_channel_credentials(), # SSL credentials (empty by default!)
        "3cb658bc94752d76c86fb0b051f58ac9e783c8d0"  # bot token from environment
    )
    
    bot.messaging.on_message_async(on_msg,on_click)
    #–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞—é—â–∏–π Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    while True:
        #–ï—Å–ª–∏ user –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–º
        if ((len(users) == 0) or (len(users) != len(last_time))):
            continue
        else:
            #–ü–æ—Å–ª–µ 20:00 –¥–æ 8:00 –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º
            date = datetime.now()
            
            for i in range(len(datas)):
                if len(datas[i]) == 3 and notif[i][1] == 1:
                    if datas[i][1] != '' and datas[i][2] != '':
                        if ((date.hour > int(datas[i][1])) or (date.hour  < int(datas[i][2]))):
                            continue
                        else:
                            time = pass_time(last_time[i])
                            #–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 30 —Å–µ–∫—É–Ω–¥ + rand(0-20) –ø–æ–ª–µ—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            if (time > 10 + random.randint(0, 20)):
                                send_notification(bot,users[i])
                                date = datetime.now()
                                last_time[i] = date.hour*60*60 + date.minute*60 + date.second
                            else:
                                continue
    
    

